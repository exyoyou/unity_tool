API


local skynet = require "skynet" 
​
--conf配置信息已经写入到注册表中，通过该函数获取注册表的变量值
skynet.getenv(varName) 。
​
--设置注册表信息，varValue一般是number或string，但是不能设置已经存在的varname
skynet.setenv(varName, varValue) 
​
--打印函数
skynet.error(...)
​
--用 func 函数初始化服务，并将消息处理函数注册到 C 层，让该服务可以工作。
skynet.start(func) 
​
--若服务尚未初始化完成，则注册一个函数等服务初始化阶段再执行；若服务已经初始化完成，则立刻运行该函数。
skynet.init(func) 
​
--结束当前服务
skynet.exit() 
​
--获取当前服务的句柄handler
skynet.self()
​
--将handle转换成字符串
skynet.address(handler)
​
--退出skynet进程
require "skynet.manager"   --除了需要引入skynet包以外还要再引入skynet.manager包。
skynet.abort()
​
--强制杀死其他服务
skynet.kill(address) --可以用来强制关闭别的服务。但强烈不推荐这样做。因为对象会在任意一条消息处理完毕后，毫无征兆的退出。所以推荐的做法是，发送一条消息，让对方自己善后以及调用 skynet.exit 。注：skynet.kill(skynet.self()) 不完全等价于 skynet.exit() ，后者更安全。


全局唯一服务
skynet.uniqueservice(servicename, ...) 
skynet.uniqueservice(true, servicename, ...) 
当带参数 true 时，则表示此服务在所有节点之间是唯一的。第一次创建唯一服，返回服务地址，第二次创建的时候不会正常创建服务，只是返回第一次创建的服务地址。

查询接口： 假如不清楚当前创建了此全局服务没有，可以通过以下接口来查询：
skynet.queryservice(servicename, ...) 
skynet.queryservice(true, servicename, ...) 
如果还没有创建过目标服务则一直等下去，直到目标服务被(其他服务触发而)创建。

当参数 带true 时，则表示查询在所有节点中唯一的服务是否存在
注意：

​ 当调用uniqueservice只传一个服务名时，表示创建当前skynet节点的全局唯一服务。当第一个参数传递true，第二个参数传递服务名时，则表示所有节点的全局唯一服务。

​ 调用queryservice时，也可以选择是否传递第一个参数true， 表示查询的是当前skynet节点的全局唯一服，还是所有节点的全局唯一服。这两种全局唯一服作用范围是不同，所有可以同时存在同名的但作用范围不同的全局唯一服。


------------------------------[[取别名]]--------------------------
local skynet = require "skynet"
require "skynet.manager"
​
--给当前服务定一个别名，可以是全局别名，也可以是本地别名
skynet.register(aliasname)
​
--给指定servicehandler的服务定一个别名，可以是全局别名，也可以是本地别名
skynet.name(aliasname, servicehandler)
-------------------------------------------------------------------

----------------------[[查询别名]]------------------------------
--查询本地别名为aliasname的服务，返回servicehandler，不存在就返回nil
skynet.localname(aliasname)
​
--[[
查询别名为aliasname的服务,可以是全局别名也可以是本地别名，
1、当查询本地别名时，返回servicehandler，不存在就返回nil
2、当查询全局别名时，返回servicehandler，不存在就阻塞等待到该服务初始化完成
]]--
local skynet = require "skynet.harbor"
harbor.queryname(aliasname)




 skynet的全局别名服务是在cslave里面实现的，现在不允许二次修改全局别名绑定关系，所以全局别名一般用来给一个永远不会退出的服务来启用。

​ 但是有些情况下，我们确实需要二次修改全局别名绑定关系，那么这个时候，我们可以尝试去修改一下cslave.lua文件，修改内容如下：


function harbor.REGISTER(fd, name, handle)
    --assert(globalname[name] == nil)  --将这一行注释掉
    globalname[name] = handle
    response_name(name)
    socket.write(fd, pack_package("R", name, handle))
    skynet.redirect(harbor_service, handle, "harbor", 0, "N " .. name)
end






local skynet = require "skynet"
--让当前的任务等待 time * 0.01s 。
skynet.sleep(time)  
​
--启动一个新的任务去执行函数 func , 其实就是开了一个协程，函数调用完成将返回线程句柄
--虽然你也可以使用原生的coroutine.create来创建协程，但是会打乱skynet的工作流程
skynet.fork(func, ...) 
​
--让出当前的任务执行流程，使本服务内其它任务有机会执行，随后会继续运行。
skynet.yield()
​
--让出当前的任务执行流程，直到用 wakeup 唤醒它。
skynet.wait()
​
--唤醒用 wait 或 sleep 处于等待状态的任务。 并不会马上唤醒需要执行完才唤醒
skynet.wakeup(co)       
​
--设定一个定时触发函数 func ，在 time * 0.01s 后触发。
skynet.timeout(time, func)  
​
--返回当前进程的启动 UTC 时间（秒）。
skynet.starttime()  
​
--返回当前进程启动后经过的时间 (0.01 秒) 。
skynet.now()
​
--通过 starttime 和 now 计算出当前 UTC 时间（秒）。
skynet.time()   





发送无需响应的消息

 --用 type 类型向 addr 发送未打包的消息。该函数会自动把...参数列表进行打包，默认情况下lua消息使用skynet.pack打包。addr可以是服务句柄也可以是别名。
skynet.send(addr, type, ...)
​
--用 type 类型向 addr 发送一个打包好的消息。addr可以是服务句柄也可以是别名。
skynet.rawsend(addr, type, msg, sz) 


发送必须响应的消息

--用默认函数打包消息，向addr发送type类型的消息并等待返回响应，并对回应信息进行解包。（自动打包与解包。）
skynet.call(addr, type, ...) 
--直接向addr发送type类型的msg,sz并等待返回响应，不对回应信息解包。（需要自己打包与解包）
skynet.rawcall(addr, type, msg, sz) 

在使用skynet.ret或者skynet.retpack进行应答时，必须要保证与接受请求时在同一个协程中（源服务地址与协程句柄已经一一对应），也就是说在哪个协程接受的请求也必须在这个协程去做响应


在skynet中，当一个服务收到一个消息的时候，会启动一个协程来处理，并且把协程句柄与发送消息的服务地址进行一一对应记录在table中，当需要响应时，就使用当前调用skynet.ret的协程句柄去table中查询对应的服务地址，然后把消息发给这个服务地址。

​	如果开了一个新的协程去调用skynet.ret，那么这个时候使用新启动的协程句柄去查询服务地址，肯定是查不到的。

​	当不想接受请求与响应请求在同一个协程中完成时，我可以使用response替代ret。
把发送服务地址以及session打包到闭包中，就可以在任意地方调用了。尽量多用skynet.response进行应答。


skynet.queue 模块可以帮助你回避这些服务重入或者伪并发引起的复杂性。


 转换协议实现代理
​	上一节效率的问题是因为服务默认接收到lua消息后，会解包消息，但是lua消息已经注册了无法更改，那么我么可以使用skynet.forward_type进行协议转换。

​	使用skynet.forward_type也是启动服务的一种方法，跟skynet.start类似，只不过skynet.forward_type还需要提供一张消息转换映射表forward_map, 其他的方法与skynet.start一样。


local skynet = require "skynet"
require "skynet.manager"    -- inject skynet.forward_type
​
skynet.register_protocol {         --注册system消息
    name = "system",
    id = skynet.PTYPE_SYSTEM,
    unpack = function (...) return ... end, --unpack直接返回不解包了
}
​
local forward_map = {
    --发送到代理服务的lua消息全部转成system消息,不改变原先LUA的消息协议处理方式
    [skynet.PTYPE_LUA] = skynet.PTYPE_SYSTEM,
    --如果接收到应答消息，默认情况下会释放掉消息msg,sz，forward的方式处理消息不会释放掉消息msg,sz
    [skynet.PTYPE_RESPONSE] = skynet.PTYPE_RESPONSE,    
}
​
local realsvr = ...
​
skynet.forward_type( forward_map ,function() --注册消息处理函数
    skynet.dispatch("system", function (session, source, msg, sz) 
        --直接转发给realsvr，接收到realsvr响应后也不释放内存，直接转发
        skynet.ret(skynet.rawcall(realsvr, "lua", msg, sz)) 
    end)--处理完不释放内存msg
    skynet.register(".proxy")
end)


伪造消息
​	伪造其他服务地址来发送一个消息，可以使用到skynet.redirect


local skynet = require "skynet" 
--使用source服务地址，发送typename类型的消息给dest服务，不需要接收响应，（source，dest只能是服务ID）
--msg sz一般使用skynet.pack打包生成
skynet.redirect(dest,source,typename, session, msg, sz)





Multicast介绍
local mc = require "skynet.multicast"
​ 引入 multicast 模块后，你可以使用 skynet 的组播方案。你可以自由创建一个频道，并可以向其中投递任意消息。频道的订阅者可以收到投递的消息。

​ 你可以通过 new 函数来创建一个频道对象。你可以创建一个新频道，也可以利用已知的频道 id 绑定一个已有频道。

local channel = mc.new()  -- 创建一个频道，成功创建后，channel.channel 是这个频道的 id 。
local channel2 = mc.new {
  channel = channel.channel,  -- 绑定上一个频道
  dispatch = function (channel, source, ...) end,  -- 设置这个频道的消息处理函数
}


channel:publish(...) 可以向一个频道发布消息。消息可以是任意数量合法的 lua 值。

​ 绑定到一个频道后，默认并不接收这个频道上的消息（也许你只想向这个频道发布消息）。你需要先调用 channel:subscribe() 订阅它。

​ 如果不再想收到该频道的消息，调用 channel:unsubscribe 。

​ 当一个频道不再使用，你可以调用 channel:delete() 让系统回收它。注：多次调用 channel:delete 是无害的，因为 channel id 不会重复使用。在频道被销毁后再调用 subscribe 或 publish 等也不会引起异常，但订阅是不起作用的，消息也不再广播。



最简单snax服务
​ 每个 snax 服务中都需要定义一个 init 函数，启动这个服务会调用这个函数，并把启动参数传给它。

snax 服务还可以定义一个 exit 函数用于响应服务退出的事件，同样能接收一些参数。

​ 和标准的 skynet 服务不同，这些参数的类型不受限制，可以是 lua 的复杂数据类型。（而 skynet 服务受底层限制，只可以接受字符串参数）


​ snax不是普通服务，需要与snax框架配合使用，必须使用snax.newservice、snax.uniqueservice、snax.globalservice这个三个函数来启动。

​ 在console服务中启动snax服务时，需要指定为snax：


snax服务请求

--无响应请求，obj是snax对象，post表示无响应请求，CMD具体的请求命令，...为请求参数列表，发送完马上返回
obj.post.CMD(...)
--有响应请求，obj是snax对象，req表示有响应请求，CMD具体的请求命令，...为请求参数列表，发送完等待响应
obj.req.CMD(...)


snax全局唯一服
local skynet = require "skynet"
local snax = require "skynet.snax"
​
skynet.start(function ()
    local obj = snax.uniqueservice("simplesnax", 123, "abc") --启动simplessnax服务
    obj = snax.queryservice("simplesnax") --查询全局唯一服
    snax.kill(obj, 123, "abc")
        
    local gobj = snax.globalservice("simplesnax", 123, "abc") --启动simplessnax服务
    gobj = snax.queryglobal("simplesnax") --查询全节点全局唯一服
    snax.kill(gobj, 123, "abc")
        
    skynet.exit()
end)


snax服务热更
​ snax 是支持热更新的（只能热更新 snax 框架编写的 lua 服务）。但热更新更多的用途是做不停机的 bug 修复，不应用于常规的版本更新。所以，热更新的 api 被设计成下面这个样子。更适合打补丁。

你可以通过 snax.hotfix(obj, patchcode) 来向 obj 提交一个 patch 。
具体热修护：
https://blog.csdn.net/qq769651718/article/details/79435352


msgserver
​	和 GateServer 和 LoginServer 一样，snax.msgserver 只是一个模板，你还需要自定义一些业务相关的代码，才是一个完整的服务。与客户端的通信协议使用的是两字节数据长度协议。
msgserver api

--uid, subid, server 把一个登陆名转换为 uid, subid, servername 三元组
msgserver.userid(username) 
---username 把 uid, subid, servername 三元组构造成一个登陆名
msgserver.username(uid, subid, server)
​
--你需要在 login_handler 中调用它，注册一个登陆名username对应的 serect
msgserver.login(username, secret) 
--让一个登陆名失效（登出），通常在 logout_handler 里调用。
msgserver.logout(username) 
​
--查询一个登陆名对应的连接的 ip 地址，如果没有关联的连接，会返回 nil 。
msgserver.ip(username) 
